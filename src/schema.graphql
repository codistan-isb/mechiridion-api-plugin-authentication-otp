extend type User {
  phone: String
  phoneVerified: Boolean
  firstName: String
  lastName: String
}
extend type Account {
  phone: String
}
extend input CreateUserInput {
  phone: String!
  firstName: String!
  lastName: String!
  otp: String
  govId: [String]
  proofOfAddress: [String]
  # isOtp: Boolean
  UserRole: UserRoleValue
  isDeleted: Boolean
  isActive: Boolean
  memberRole: memberRoleValue
}
enum UserRoleValue {
  admin
  user
  # shopOwner
  # shopMember
}
type MemberPayload {
  status: Boolean
  message: String
  userData: JSON
  # userName: String!
  # phone: String!
  # email: String!
  # firstName: String
  # lastName: String
  # isDeleted: Boolean
  # isActive: Boolean
  # profileImage: String
  # memberRole: memberRoleValue
}
input addMemberInput {
  userName: String!
  phone: String!
  email: String!
  firstName: String
  lastName: String
  isDeleted: Boolean
  isActive: Boolean
  profileImage: String
  memberRole: memberRoleValue
  password: String
  parentId: ID
}
input updateMemberInput {
  accountId: ID!
  userName: String
  firstName: String
  lastName: String
  isDeleted: Boolean
  isActive: Boolean
  profileImage: String
}
enum memberRoleValue {
  shopOwner
  shopMember
}
type CreateUserResult {
  id: ID
  phone: String
  firstName: String
  lastName: String
  otp: String
  govId: [String]
  proofOfAddress: [String]
  UserRole: UserRoleValue
  isDeleted: Boolean
  isActive: Boolean
  memberRole: memberRoleValue
}

type phone {
  code: String
  expiry: String
}
type dict {
  code: String
  expiry: String
}
type sendOtpResponse {
  success: Boolean
  dict: dict
}

type verifyOTPResponse {
  status: Boolean
  response: String
}

extend type Mutation {
  checkUserExist(phone: String, email: String): Boolean
  sendOTP(phone: String, email: String): Boolean
  deleteUser(userId: String!): Boolean
  createUserWithOtp(user: CreateUserInput!): CreateUserResult
  verifyOTP(phone: String, otp: String): verifyOTPResponse
  authenticateWithOTP(
    serviceName: String!
    params: AuthenticateParamsInput!
  ): LoginResult
  addMember(input: addMemberInput): MemberPayload
  updateMember(input: updateMemberInput): MemberPayload
  deleteMember(id: ID!): MemberPayload
}

extend type Query {
  getAllMembers: MemberPayload
  getMemberById(id: ID!): MemberPayload
}
